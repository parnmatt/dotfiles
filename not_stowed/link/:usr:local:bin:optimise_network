#!/usr/bin/env python

import argparse
from collections import defaultdict, namedtuple
import contextlib
import datetime
import functools
import glob
import itertools
import operator
import os
import re
import subprocess

import pandas as pd
import Reflector
import speedtest


def _current_network():
    """Returns string of current network via `netctl-auto`."""
    with subprocess.Popen('netctl-auto list', shell=True,
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE) as proc:
        networks, error = proc.communicate()
        if error:
            raise PermissionError('Run as root')
        networks = re.split(r'\n\s*', networks.decode().strip())
        networks = (network.strip('* ')
                    for network in networks
                    if network.startswith('*'))
    return next(networks)


NETWORK = _current_network()

NetworkSpeed = namedtuple('NetworkSpeed', ('download', 'upload'))


def _network_speed():
    """Calculate current download and upload speeds in kiB."""
    tester = speedtest.Speedtest()
    tester.get_best_server()

    download = tester.download() / 8 / 1024  # kiB
    upload = tester.upload() / 8 / 1024  # kiB
    return NetworkSpeed(download, upload)


def _link(src, dest):
    """Symbolic link `src` to `dest`."""
    os.makedirs(os.path.dirname(dest), exist_ok=True)
    with contextlib.suppress(FileNotFoundError):
        os.remove(dest)
    os.symlink(src, dest)


def _is_filename_older_than(filename, older_than=None):
    """Checks if a file is older than a datetime.timedelta."""
    if older_than is None:
        return True

    now = datetime.datetime.now()
    mtime = os.path.getmtime(filename)
    last_modified = datetime.datetime.fromtimestamp(mtime)
    return now - last_modified > older_than


class Config():
    def __init__(self, path, conf_expression):
        self.path = path
        self.conf_expression = conf_expression
        self.name = self.__class__.__name__

    def ls(self):
        for path in glob.glob(self._filename('*')):
            if os.path.isfile(path):
                yield path

    def rm(self, network_name):
        print('Removing {} configuration for {}'.format(self.name, network_name))
        with contextlib.suppress(FileNotFoundError):
            os.remove(self._filename(network_name))

    def _filename(self, network_name, expression=True):
        if expression:
            basename = self.conf_expression.format(network_name)
        else:
            basename = network_name
        return os.path.join(self.path, basename)


class Network(Config):
    def __init__(self):
        super().__init__('/etc/netctl', '{}')


class Service(Config):
    def __init__(self, path, conf_expression, conf_name):
        super().__init__(path, conf_expression)
        self.service_file = self._filename(conf_name, expression=False)

    def ls(self):
        for path in super().ls():
            if path != self.service_file:
                yield path

    def link(self):
        """Symbolic link service configuration for current network"""
        print('Linking {} configuration'.format(self.name))
        _link(self._filename(NETWORK), self.service_file)

    def optimise(self, older_than=None):
        """
        Optmise the service if the rTorrent file's modification time is
        older than the given datetime.timedelta object, or None.
        """

        if (not os.path.exists(self.service_file)
                or _is_filename_older_than(self.service_file, older_than)):
            print('Optimising {}'.format(self.name))
            self._optimise()

        self.link()

    def _optimise(self):
        raise NotImplementedError('_optimise() needs to be implemented for each inherited service')


class rTorrent(Service):
    def __init__(self):
        super().__init__('/etc/rtorrent', '{}.conf', 'network.conf')

    def _optimise(self):
        """
        Optimise rTorrent's settings and writes to
        /etc/rtorrent/NETWORK.conf. Sets the global download and upload
        rates, and the maximum connected peers, and the maxiumum simulaneous
        uploads.
        """
        speed = _network_speed()

        settings = {
                'download_rate': 0.95 * speed.download,
                'upload_rate': 0.8 * speed.upload,
                }
        settings.update({
            'max_peers': 1.3 * settings['upload_rate'],
            'max_uploads': 1 + settings['upload_rate']/6,
            })

        # round down to integers
        settings = {setting: int(value) for setting, value in settings.items()}

        # create config file
        os.makedirs(os.path.dirname(self.service_file), exist_ok=True)
        with open(self.service_file, 'w') as file:
            for setting, value in settings.items():
                print(setting, '=', value, file=file)


class Pacman(Service):
    def __init__(self):
        super().__init__('/etc/pacman.d', 'mirrorlist.{}', 'mirrorlist')

    def _optimise(self):
        """
        Optimises pacman mirrorlist using `reflector` and writes to
        /etc/pacman.d/mirrorlist.NETWORK Selects the 10 fastest servers
        from the 50 most up-to-date servers using the HTTP protocal.
        """
        settings = {
                'protocol': 'http',
                'latest': 50,
                'fastest': 10,
                'save': self.service_file,
                }

        reflector_args = tuple(itertools.chain.from_iterable(
            ('--{}'.format(setting), '{}'.format(value))
            for setting, value in settings.items()))
        Reflector.main(reflector_args)


def networks_with_services(services):
    networks = frozenset(map(os.path.basename, Network().ls()))
    networks_with_services_ = defaultdict(dict)

    for service in services:
        configs = frozenset(service.ls())
        for network in networks:
            config = service._filename(network)
            networks_with_services_[network][service.name] = config in configs

    df = pd.DataFrame.from_dict(networks_with_services_, orient='index')
    df.index.name = 'Networks'
    return df


def clean_up(services):
    df = networks_with_services(services)

    auto_remove = ~functools.reduce(operator.and_, (df[col] for col in df.columns))
    df_remove = df[auto_remove]
    to_remove = set(df_remove.index)

    def indices():
        for num, index in enumerate(df.index, start=1):
            prefix = ''
            if index == NETWORK:
                prefix += '='
            if index in to_remove:
                prefix += '*'
            yield prefix, num, index

    index_name = df.index.name
    df.set_index([list(indices())], inplace=True)
    df.index.names = '', '', index_name

    print(df, end='\n\n')
    print('= is current network.')
    print('* will be automatically removed.')

    remove = input('Enter numbers corresponding to networks to be removed: ')
    if remove:
        remove = [int(r) - 1 for r in re.split(r'[,\s]', remove)]
        to_remove |= set(name for *_, name in df.iloc[remove].index.values)

    for network in to_remove:
        for config in (Network(), *services):
            config.rm(network)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='Optimise network based things')
    parser.add_argument('-c', '--clean-up', action='store_true',
                        help='clean up configuration files')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-f', '--force', action='store_true',
                       help='forcibly optimise')
    group.add_argument('-l', '--link-only', action='store_true',
                       help='link only, do not optimise')
    group.add_argument('-d', '--remove', nargs='*',
                       help='Remove given network configurations; defaults to current network')
    args = parser.parse_args()

    services = Pacman(), rTorrent()

    if args.clean_up:
        clean_up(services)

    if args.force:
        for service in services:
            service.optimise()
    elif args.link_only:
        for service in services:
            service.link()
    elif args.remove is not None:
        if args.remove == []:
            args.remove.append(NETWORK)
        for network in args.remove:
            for service in services:
                service.rm(network)
    else:
        for service in services:
            service.optimise(older_than=datetime.timedelta(weeks=1))
